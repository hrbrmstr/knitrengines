% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cawk_engine.r
\name{knitr_cawk_engine}
\alias{knitr_cawk_engine}
\title{knitr engine for the CSV-enhanced Awk language}
\usage{
knitr_cawk_engine(opts)
}
\arguments{
\item{options}{knitr options (required parameter)}
}
\description{
\href{https://github.com/onetrueawk/awk/tree/csv}{The one, true Awk} now
has support for using CSV columns as fields.
}
\details{
It will eventually be the default on most distros, until then, to
use this knitr engine, you will need to do the following:
\itemize{
\item \verb{git clone git@github.com:onetrueawk/awk.git}
\item \verb{git checkout csv}
\item \code{make}
\item Move \code{a.out} to \code{cawk} somewhere on your \code{PATH}
}

You can find an example Quarto document that has a \code{cawk}
section via:

\code{system.file("examples/cawk-test.qmd", package="knitrengines")}
}
\section{Chunk Options}{


Any chunk with the language of \code{cawk} will be processed
by this engine. Because there is quite a bit baked into
the way Awk works, we need to be able to set up various
command line options to get it to work. We do that
via knitr chunk options (either inline or in quarto
document structured comments).

The following chunk options are supported:
\itemize{
\item \code{awk.csv}: when set to \code{TRUE}, this tells \code{cawk} to assume
the input files are CSV files. This is not set by default
though I'm open to feedback on that life choice.
\item \code{awk.var.NAME}: CSV-enabled Awk knows nothing about
column names. You reference each column by field number.
That's not great for "data analysis" work (it isn't great
for anything but one-liners, tbh), so one can use the \code{-v}
CLI option to define variable name mappings to field numbers.
So defining \code{awk.var.logdate=1} will let you use \verb{$logdate} in
the Awk script vs \verb{$1}.
\item \code{awk.file.#}: Awk processes stdin and files. You can't use data
from the previous chunk without shoving it into a file. Awk can
also work with multiple input files. You can specify the relative
or full path(s) via something like \code{awk.file.1="this.csv"}. The
entire \code{awk.file.#} gets ignored. It just needs to be unique.
They are passed to the Awk CLI in the order they appear in the options.
}
}

\author{
Bob Rudis
}
