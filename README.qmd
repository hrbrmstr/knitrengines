---
format: gfm
editor_options:
  chunk_output_type: console
---
```{r pkg-knitr-opts, include=FALSE}
hrbrpkghelpr::global_opts()
```

```{r badges, results='asis', echo=FALSE, cache=FALSE}
hrbrpkghelpr::stinking_badges()
```

```{r description, results='asis', echo=FALSE, cache=FALSE}
hrbrpkghelpr::yank_title_and_description()
```

## What's Inside The Tin

The following functions are implemented:

```{r ingredients, results='asis', echo=FALSE, cache=FALSE}
hrbrpkghelpr::describe_ingredients()
```

## Come Again?

`knitrengines` is package to collect and seamlessly add new language engines to knitr

You can thank [Wendy Smoak](http://wsmoak.net/2015/09/01/executable-elixir-tufte-handout.html) for this package as a [comment on a DDS post](http://datadrivensecurity.info/blog/posts/2015/Jun/running-other-languages-in-r-markdown-files/) sparked it.

The knitr package already has support for a [plethora](https://bookdown.org/yihui/rmarkdown/language-engines.html)
of languages besides R code chunks (26 as of the last update to this
package). That is probably sufficient for the vast majority of users.

However, if you need to perform some processing in another languages and want
to include it in your reproducible workflow, this package will allow you to
incorporate those language code chunks provided there is a matching knitr
language processor available.

To use one of these alternate code chunks, just ensure you have a call to
`library(knitrengines)` in an R code chunk at/near the top of your R
markdown file then use one of the available engines via the short name below
as the package will auto-register them on attach.

This package contains support for the following engines:

- `cawk`: Support for Awk builds that include CSV support (see `?knitr_cawk_engine`).
- `elixir` : Elixir language support
- `pygments` : Use [pygments](http://pygments.org/) to stylize non-executable code blocks. 
  See `knitrengines::knitr_pygments_engine` for all the "gotchas"
- `gnuplot` : Use [gnuplot](http://www.gnuplot.info/) for plotting

You can contribe to the project and add support for other language
code chunks by:

- forking this repo
- adding a new `xyz_engine.r` under the `R` directory ensuring you add yourself 
as an `@author`
- adding that engine to the list in `zzz.r`
- update `DESCRIPTION` and add yourself as a contributor and update the third 
dottedn number in the version string (i.e. 0.2.0 -> 0.2.1)
- update `inst/examples/knitr_engine_test.Rmd` and add a (small) example of your engine
- update the `README.Rmd` to include your new engine.
- submit a PR

The only real downside is that these language chunks do not have
access to the variables in/across chunks, so you have to export the data from
previous chunks to files (or databases, etc.) to access it (if needed).

Before you go creating other engines, these are the ones knitr already:

```{r existing-engines}
sort(names(knitr::knit_engines$get()))
```

## Installation

```{r install-ex, results='asis', echo=FALSE, cache=FALSE}
hrbrpkghelpr::install_block()
```
